From marc@Altitude.CAM.ORG Wed Apr  8 15:28:27 1992
Received: from eqsun5.Civil.Concordia.CA by immd4.informatik.uni-erlangen.de with SMTP;
	id AA01085 (5.61++/7.3m-FAU); Wed, 8 Apr 92 15:27:12 +0200
Received: from Altitude.CAM.ORG by eqsun5.Civil.Concordia.CA (5.65c8/IDA/mb) with UUCP
	id AA16575 for immd4.informatik.uni-erlangen.de!jnweiger; Wed, 8 Apr 1992 09:24:56 -0400
Received: by Altitude.CAM.ORG (5.65c8/IDA/mb)
	id AA29686 for jnweiger@immd4.informatik.uni-erlangen.de; Wed, 8 Apr 1992 09:29:35 -0400
From: Marc Boucher <marc@CAM.ORG>
Message-Id: <199204081329.AA29686@Altitude.CAM.ORG>
Subject: new iScreen modifs
To: jnweiger@immd4.informatik.uni-erlangen.de (Juergen Weigert)
Date: Wed, 8 Apr 92 9:29:32 EDT
X-Mailer: ELM [version 2.4dev PL65]
Mime-Version: 1.0
Content-Type: text
Content-Length: 6728      
Status: OR


Salut-

I'm back, with yet another set of small changes to iScreen 3.2 described in
yet another mail of usual format. The diffs below are relative to the
distributed 3.2 sources + screen320-321.patch + my last patch.

Summary:

extern.h
	-waitpid is used instead of wait3, when not BSDWAIT. Prototype waitpid()
	-discard mysterious _flsbuf junk

screen.c
	-IRIX 4.0 -xansi compilation wants <stdio.h> before <pwd.h>
	-out of place TIOCPKT comments deleted
	-properly declare pointer-to-signal-handler variables (with SIGPROTOARG)
	-Use automatically defined __sgi instead of IRIX_4_0 test for IRIX 4.0
	(verified that IRIX 3.n cc or cpp does not define __sgi, just sgi)
	-set SIGCLD handler to default before IRIX 4 _getpty() call because
	it may execute /usr/adm/mkpts as a child process.

screen.h
	-TIOCPKT mode IS NOT FIXED IN IRIX 4.0{.1} ! Disable it for all (sgi)'s
	new comments about TIOCPKT derived from those deleted in screen.c

socket.c
	-On IRIX 4.0, the FILE buffer for stdout becomes corrupted when the
	login tty's file descriptor is invalidated (e.g. tcp connection dropped)
	during detachment, due to a weird sequence of events that exploits some
	race condition ..  I blame this on the use of stdio in signal handlers,
	which cannot be fixed without major restructuring. So I have added code
	in socket.c that reinitializes the victims when performing reattachment.
	It's best to leave it for all platforms, because the problem is really
	not IRIX specific.

Makefile.sgi
	-Propose best [supported] compiler mode for operating system / software options


How close is 3.3?

with respect, (why must it be so explicit)
-- 
^@-------~~--**----/ --- - Marc Boucher
marc@CAM.ORG \----?	":
/-----_--  -    ----_|| +1 514 466 8932 - &-

--- extern.h.old	1992/03/09 03:23:55
+++ extern.h	1992/04/08 12:29:23
@@ -57,7 +57,7 @@
 union wait;
 extern int wait3 __P((union wait *, int, struct rusage *));
 # else
-extern pid_t wait3 __P((int *, int, struct rusage *));
+extern pid_t waitpid __P((pid_t pid, int *statptr, int options));
 # endif
 #endif /* WAITSTUFF_DECLARED */
 extern int getdtablesize __P((void));
@@ -98,13 +98,6 @@
 extern int tgetnum __P((char *));
 extern int tgetflag __P((char *));
 extern void tputs __P((char *, int, void (*)(int)));
-#ifdef notdef
-extern unsigned char     *_flsbuf __P((unsigned char, FILE *));
-#endif
-#if !defined(NeXT) && !defined(apollo)
-/* not all apollo's may have this. grrr */
-extern int _flsbuf __P((unsigned char, FILE *));
-#endif
 # ifdef POSIX
 extern pid_t setsid __P((void));
 #  ifndef SETPGID_DECLARED
--- screen.c.old	1992/03/28 19:49:03
+++ screen.c	1992/04/08 12:29:24
@@ -39,6 +39,9 @@
 #include <sys/param.h>
 /* #include <signal.h> */
 #include <ctype.h>
+#ifdef __sgi
+#include <stdio.h> /* needed before pwd.h to avoid ansi compiler whining */
+#endif /* __sgi */
 #include <pwd.h>
 #include <fcntl.h>
 #ifdef sgi
@@ -2356,20 +2359,6 @@
 #endif
 #ifdef TIOCPKT
     {
-      /*
-       * # if defined(sgi) && !defined(IRIX_4_0)
-      *
-       * on IRIX 3.3, regardless of stream head's read mode (RNORM/RMSGN/RMSGD)
-       * we loose data in TIOCPKT mode if our buffer is too small (IOSIZE)
-       * to hold the whole packet at first read().
-       * (Marc Boucher)
-       *
-       * int flag = 0;
-       * # else / * sgi && !IRIX_4_0 * /
-       *
-       * This no longer applies, as TIOCPKT is undef'ed for non-IRIX_4_0 sgi
-       * jw.
-       */
       int flag = 1;
 
       if (ioctl(f, TIOCPKT, &flag))
@@ -2861,7 +2850,7 @@
 # ifdef SVR4
   char *ptsname __P((int));
   int unlockpt __P((int)), grantpt __P((int));
-  sig_t (*sigcld)();
+  sig_t (*sigcld)__P(SIGPROTOARG);
 
   if ((f = open("/dev/ptmx", O_RDWR)) == -1)
     return(-1);
@@ -2936,14 +2925,23 @@
 
 # else  /* MIPS */
 #  ifdef sgi
-#   ifdef IRIX_4_0
+#   ifdef __sgi /* __sgi -> IRIX 4.0 */
 
 static int OpenPTY()
 {
   int fd;
   char *name, *_getpty(int *, int, mode_t, int); /* 1000 pty fix */
+  sig_t (*sigcld)__P(SIGPROTOARG);
+
+  /*
+   * SIGCLD set to SIG_DFL for _getpty() because it may fork() and
+   * exec() /usr/adm/mkpts
+   */
 
+  sigcld = signal(SIGCLD, SIG_DFL);
   name = _getpty(&fd, O_RDWR | O_NDELAY, 0600, 0);
+  signal(SIGCLD, sigcld);
+
   if (name == NULL)
     return -1;
   strcpy(PtyName, "/dev/ptc");
@@ -2951,7 +2949,7 @@
   return fd;
 }
 
-#   else /* IRIX_4_0 */
+#   else /* __sgi */
 
 static int OpenPTY()
 {
@@ -2974,7 +2972,7 @@
   return f;
 }
 
-#   endif /* IRIX_4_0 */
+#   endif /* __sgi */
 #  else /* sgi */
 #   ifdef _AIX /* RS6000 */
 
@@ -3451,8 +3449,8 @@
 char *pwto;
 {
   char *npw = NULL;
-  sig_t (*sighup)();
-  sig_t (*sigusr1)();
+  sig_t (*sighup)__P(SIGPROTOARG);
+  sig_t (*sigusr1)__P(SIGPROTOARG);
   int tries;
 
   sigusr1 = signal(SIG_PW_OK, trysendok);
@@ -3759,7 +3757,7 @@
   /* reset signals */
   for (sig = 1; sig < NSIG; sig++)
     {
-      if (sigs[sig] != (sig_t(*) ()) - 1)
+      if (sigs[sig] != (sig_t(*) __P(SIGPROTOARG)) - 1)
 	signal(sig, sigs[sig]);
     }
 }				/* LockTerminal */
--- screen.h.old	1992/03/09 23:42:33
+++ screen.h	1992/04/08 12:29:25
@@ -579,7 +579,12 @@
 # define BSDWAIT
 #endif
 
-#if defined(sgi) && !defined(IRIX_4_0)
+#if defined(sgi)
+/* on IRIX, regardless of the stream head's read mode (RNORM/RMSGN/RMSGD)
+ * TIOCPKT mode causes data loss if our buffer is too small (IOSIZE)
+ * to hold the whole packet at first read().
+ * (Marc Boucher)
+ */
 # undef TIOCPKT
 #endif
 
--- socket.c.old	1992/03/09 23:42:33
+++ socket.c	1992/04/08 12:29:26
@@ -787,6 +787,8 @@
   static struct msg m;
   char *p;
   static char lbuf[20], cbuf[20]; /* static for later putenv()'s */
+  FILE *tstd;
+
 #ifdef NAMEDPIPE
   /*
    * we may be called if there are no pending messages, so we will have to
@@ -955,6 +957,14 @@
 
       (void) dup(0);
       (void) dup(0);
+
+      /* stdio operations within signal handlers may have caused corruption
+       * of stdin/out/err; reinitialize them.
+       */
+      tstd = fdopen(0, "r+"); *stdin  = *tstd;
+      tstd = fdopen(1, "r+"); *stdout = *tstd;
+      tstd = fdopen(2, "r+"); *stderr = *tstd;
+
       GetTTY(0, &OldMode);
 #if defined(BSDJOBS) && !(defined(POSIX) || defined(SYSV))
       if ((DevTty = open("/dev/tty", O_RDWR | O_NDELAY)) == -1)
--- config/Makefile.sgi.old	1992/04/08 12:29:54
+++ config/Makefile.sgi	1992/04/08 12:33:31
@@ -4,8 +4,14 @@
 # See config.h for configuration options.
 #
 
-# If you choose to compile with the tried and true:
-CC= cc
+# Choose compiler mode according to OS and language options installed
+# IRIX 3.*:
+#CC= cc
+# IRIX 3.* ansi compiler:
+#CC= cc -ansi
+# IRIX 4.* extended ansi:
+CC= cc -xansi
+
 CFLAGS= -O 
 #CFLAGS= -g -DTMPTEST -DDEBUG 
 #CFLAGS= -g 

